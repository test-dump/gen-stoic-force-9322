# User Test

test_user.py
```python
import pytest
from flask_jwt_extended import create_access_token

from app import app, db, User

@pytest.fixture
def client():
    app.config['TESTING'] = True
    client = app.test_client()

    # Establish an application context before running the tests.
    ctx = app.app_context()
    ctx.push()

    yield client

    ctx.pop()

def test_user_register(client):
    response = client.post('/api/user/register', json={
        'username': 'testuser', 'password': 'password'
    })
    data = response.get_json()
    assert response.status_code == 200
    assert data['username'] == 'testuser'

def test_user_login(client):
    user = User(username='testuser', password=User.encrypt_password('password'))
    db.session.add(user)
    db.session.commit()

    response = client.post('/api/user/login', json={
        'username': 'testuser', 'password': 'password'
    })
    data = response.get_json()
    assert response.status_code == 200
    assert 'access_token' in data
```

# Book Test

test_book.py
```python
import pytest

from app import app, db, Book

@pytest.fixture
def client():
    app.config['TESTING'] = True
    client = app.test_client()

    # Establish an application context before running the tests.
    ctx = app.app_context()
    ctx.push()

    yield client

    ctx.pop()

def test_get_all_books(client):
    book = Book(title='testbook', author='testauthor', year='2000', summary='testsummary')
    db.session.add(book)
    db.session.commit()

    response = client.get('/api/book')
    data = response.get_json()
    assert response.status_code == 200
    assert len(data) == 1
    assert data[0]['title'] == 'testbook'
```

# Review Test

test_review.py
```python
import pytest

from app import app, db, User, Book, Review

@pytest.fixture
def client():
    app.config['TESTING'] = True
    client = app.test_client()

    # Establish an application context before running the tests.
    ctx = app.app_context()
    ctx.push()

    yield client

    ctx.pop()

def test_add_review(client):
    user = User(username='testuser', password=User.encrypt_password('password'))
    db.session.add(user)

    book = Book(title='testbook', author='testauthor', year='2000', summary='testsummary')
    db.session.add(book)
    db.session.commit()

    review = Review(rating=5, text='Great book!', user_id=user.id, book_id=book.id)
    db.session.add(review)
    db.session.commit()

    response = client.get(f'/api/review/{book.id}')
    data = response.get_json()
    assert response.status_code == 200
    assert len(data) == 1
    assert data[0]['rating'] == 5
    assert data[0]['text'] == 'Great book!'
```

Dependencies to run the tests:

requirements_test.txt
```python
pytest
Flask
SQLAlchemy
Flask-SQLAlchemy
Werkzeug
flask-marshmallow
flask_jwt_extended
```